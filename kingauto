#!/system/bin/sh
# KTSR by pedro (pedrozzz0 @ GitHub)
# If you wanna use it as part of your project, please maintain the credits to it respective's author(s).

MODPATH=/data/adb/modules/KTSR

# Load libraries
. "$MODPATH"/libs/libktsr.sh

# Calc 80% of the total amount of the total device RAM
full_ram=$((total_ram * 20 / 100))

toptsdir=/dev/stune/top-app/tasks

toptcdir=/dev/cpuset/top-app/tasks

# Get screen state (ON | OFF)
get_scrn_state() {
	scrn_state=$(dumpsys power | grep state=O | cut -d "=" -f 2)
	if [[ "$scrn_state" == "ON" ]]; then 
	    scrn_on=1
	else 
	    scrn_on=0
	fi
}

(
while true; do
# This script basically check if packages PIDs is found on stune / cpuset top-app tasks
for gpid in $(pgrep -f netease) $(pgrep -f tipsworks) $(pgrep -f studiowildcard) $(pgrep -f wardrumstudios) $(pgrep -f ExiliumGames) $(pgrep -f com2us) $(pgrep -f zuuks) $(pgrep -f junegaming) $(pgrep -f pixelbite) $(pgrep -f junesoftware) $(pgrep -f sozap) $(pgrep -f dotemu) $(pgrep -f playables) $(pgrep -f playrisedigital) $(pgrep -f rockstar) $(pgrep -f blackpanther) $(pgrep -f noodlecake) $(pgrep -f linegames) $(pgrep -f kleientertainment) $(pgrep -f agaming) $(pgrep -f generagames) $(pgrep -f astragon) $(pgrep -f chucklefish) $(pgrep -f t2kgames) $(pgrep -f t2ksports) $(pgrep -f turner) $(pgrep -f uplayonline) $(pgrep -f pubg) $(pgrep -f dreamotion) $(pgrep -f snailgames) $(pgrep -f dexintgames) $(pgrep -f haegin) $(pgrep -f panzerdog) $(pgrep -f igg) $(pgrep -f gtarcade) $(pgrep -f naxon) $(pgrep -f mame4droid) $(pgrep -f kakaogames) $(pgrep -f telltalegames) $(pgrep -f seleuco) $(pgrep -f innersloth) $(pgrep -f kiloo) $(pgrep -f imaginalis) $(pgrep -f refuelgames) $(pgrep -f scottgames) $(pgrep -f clickteam) $(pgrep -f minigames) $(pgrep -f headupgames) $(pgrep -f mobigames) $(pgrep -f callofduty) $(pgrep -f ubisoft) $(pgrep -f ppsspp) $(pgrep -f cf) $(pgrep -f feralinteractive) $(pgrep -f riotgames) $(pgrep -f playgendary) $(pgrep -f joymax) $(pgrep -f deadeffect) $(pgrep -f blackdesertm) $(pgrep -f firsttouchgames) $(pgrep -f standoff2) $(pgrep -f criticalops) $(pgrep -f wolvesinteractive) $(pgrep -f gamedevltd) $(pgrep -f mojang) $(pgrep -f miHoYo) $(pgrep -f miniclip) $(pgrep -f moontoon) $(pgrep -f gameloft) $(pgrep -f netmarble) $(pgrep -f yoozoogames) $(pgrep -f eyougame) $(pgrep -f asphalt) $(pgrep -f dhlove) $(pgrep -f fifamobile) $(pgrep -f freefireth) $(pgrep -f activision) $(pgrep -f konami) $(pgrep -f gamevil) $(pgrep -f pixonic) $(pgrep -f gameparadiso) $(pgrep -f wargaming) $(pgrep -f madfingergames) $(pgrep -f supercell) $(pgrep -f allstar) $(pgrep -f garena) $(pgrep -f ea.gp) $(pgrep -f pixel.gun3d) $(pgrep -f titan.cd) $(pgrep -f rpg.fog) $(pgrep -f edkongames) $(pgrep -f ohbibi) $(pgrep -f apex_designs) $(pgrep -f roblox) $(pgrep -f halfbrick) $(pgrep -f maxgames) $(pgrep -f wildlife.games) $(pgrep -f blizzard); do
  if [[ "$(grep -Eo "$gpid" "$toptsdir")" ]] || [[ "$(grep -Eo "$gpid" "$toptcdir")" ]]; then
      kmsg3 ""
      kmsg "User is playing, applied gaming profile"
      gaming
      sleep 30
for spid in $(pgrep -f whatsapp) $(pgrep -f musically) $(pgrep -f adobe) $(pgrep -f telegram) $(pgrep -f netflix) $(pgrep -f wemesh) $(pgrep -f discord) $(pgrep -f youtube) $(pgrep -f facebook) $(pgrep -f chrome) $(pgrep -f browser) $(pgrep -f instagram) $(pgrep -f docs) $(pgrep -f twitch); do
  if [[ "$(grep -Eo "$spid" "$toptsdir")" ]] || [[ "$(grep -Eo "$spid" "$toptcdir")" ]]; then
      kmsg3 ""
      kmsg "User is using social media, and etc apps. Applied balanced profile"
      balanced
      sleep 30
for bpid in $(pgrep -f geekbench) $(pgrep -f androbench2) $(pgrep -f kinemaster) $(pgrep -f futuremark) $(pgrep -f cputhrottlingtest) $(pgrep -f camera) $(pgrep -f cam) $(pgrep -f antutu); do
  if [[ "$(grep -Eo "$bpid" "$toptsdir")" ]] || [[ "$(grep -Eo "$bpid" "$toptcdir")" ]]; then
      kmsg3 ""
      kmsg "User is running benchmark / heavy apps. Applied extreme profile"
      extreme
      sleep 30
  fi
    done
        fi
          done
              fi
                done

      get_scrn_state

      if [[ "$(cat /sys/class/leds/lcd-backlight/brightness)" == "0" ]] || [[ "$(cat /sys/class/backlight/panel*-backlight/brightness)" == "0" ]] || [[ "$scrn_on" == "0" ]]; then
          kmsg3 ""
          kmsg "Device screen is turned off. Applied battery profile, extended script check time"
          battery
          sleep 45
      fi

      get_batt_sts

      if [[ "$batt_sts" == "Charging" ]]; then
          kmsg3 ""
          kmsg "Device is charging, trying to reduce battery cycles by applying battery profile and extending check time"
          battery
          sleep 45
      fi

      get_batt_pctg
     
      if [[ "$batt_pctg" -lt "20" ]]; then
          kmsg3 ""
          kmsg "Device battery is lower than 20%, applying battery profile to prolong battery life"
      else
          kmsg3 ""
          kmsg "No considerable usage found. Applied latency profile"
          latency
          sleep 15
      fi
  
      get_ram_info

if [[ "$avail_ram" -lt "$full_ram" ]] || [[ "$avail_ram" -eq "$full_ram" ]]; then
    kmsg3 ""
    kmsg "Device ram is almost fully in use, dropping caches to free some RAM"
    sync
    write "$vm/drop_caches" "3"
fi
  done
)&