#!/system/bin/sh
# KTSRâ„¢ by pedro (pedrozzz0 @ GitHub)
# If you wanna use it as part of your project, please maintain the credits to it respective's author(s).
modpath="/data/adb/modules/KTSR"

# Load libraries
source "$modpath/libs/libktsr.sh"

full_ram=$((total_ram * 20 / 100))

current_prof=none

[[ "$1" == "--exit" ]] && exit 0

(
	while true; do
		# This script basically check if packages PIDs is found on stune / cpuset top-app tasks
		for gpid in $(pgrep -f pubg) $(pgrep -f tgc) $(pgrep -f jp.garud) $(pgrep -f hypergryph) $(pgrep -f denachina) $(pgrep -f bilibili) $(pgrep -f aligames) $(pgrep -f hanjiasongshu) $(pgrep -f sofunny) $(pgrep -f kurogame) $(pgrep -f aethersx2) $(pgrep -f duckstation) $(pgrep -f digitalsky) $(pgrep -f superevilmegacorp) $(pgrep -f yingxiong) $(pgrep -f netease) $(pgrep -f tipsworks) $(pgrep -f playdigious) $(pgrep -f studiowildcard) $(pgrep -f wardrumstudios) $(pgrep -f ExiliumGames) $(pgrep -f com2us) $(pgrep -f czuuks) $(pgrep -f junegaming) $(pgrep -f pixelbite) $(pgrep -f junesoftware) $(pgrep -f sozap) $(pgrep -f dotemu) $(pgrep -f playables) $(pgrep -f playrisedigital) $(pgrep -f rockstargames) $(pgrep -f blackpanther) $(pgrep -f noodlecake) $(pgrep -f linegames) $(pgrep -f NextFloor) $(pgrep -f kleientertainment) $(pgrep -f agaming) $(pgrep -f generagames) $(pgrep -f astragon) $(pgrep -f chucklefish) $(pgrep -f t2kgames) $(pgrep -f t2ksports) $(pgrep -f tt2ksports) $(pgrep -f uplayonline) $(pgrep -f dreamotion) $(pgrep -f snailgameusa) $(pgrep -f duniagames) $(pgrep -f com.haegin) $(pgrep -f panzerdog) $(pgrep -f igg) $(pgrep -f gtarcade) $(pgrep -f com.gta) $(pgrep -f seleuco) $(pgrep -f kakaogames) $(pgrep -f telltalegames) $(pgrep -f innersloth) $(pgrep -f kiloo) $(pgrep -f sybogames) $(pgrep -f imaginalis) $(pgrep -f refuelgames) $(pgrep -f scottgames) $(pgrep -f illumix) $(pgrep -f clickteam) $(pgrep -f headupgames) $(pgrep -f mobigame) $(pgrep -f masomo) $(pgrep -f emagroup) $(pgrep -f generamobile) $(pgrep -f wb.goog) $(pgrep -f ubisoft) $(pgrep -f rayark) $(pgrep -f android_google) $(pgrep -f ppsspp) $(pgrep -f feralinteractive) $(pgrep -f riotgames) $(pgrep -f playgendary) $(pgrep -f badflyinteractive) $(pgrep -f pearlabyss) $(pgrep -f firsttouchgames) $(pgrep -f axlebolt) $(pgrep -f criticalops) $(pgrep -f wolvesinteractive) $(pgrep -f weightgames) $(pgrep -f gamedevltd) $(pgrep -f mojang) $(pgrep -f miHoYo) $(pgrep -f miniclip) $(pgrep -f moonton) $(pgrep -f android.ANMP) $(pgrep -f netmarble) $(pgrep -f yoozoogames) $(pgrep -f eyougame) $(pgrep -f garena) $(pgrep -f dts) $(pgrep -f activision) $(pgrep -f konami) $(pgrep -f gamevil) $(pgrep -f pixonic) $(pgrep -f gameparadiso) $(pgrep -f wargaming) $(pgrep -f madfingergames) $(pgrep -f supercell) $(pgrep -f ea.gp) $(pgrep -f ea.game) $(pgrep -f ea.games) $(pgrep -f pixel.gun3d) $(pgrep -f pixel.survival) $(pgrep -f titan.cd) $(pgrep -f survival.rpg) $(pgrep -f edkongames) $(pgrep -f ohbibi) $(pgrep -f apex_designs) $(pgrep -f com.roblox) $(pgrep -f halfbrick) $(pgrep -f maxgames) $(pgrep -f blizzard) $(pgrep -f doubleaxion) $(pgrep -f blayzegames) $(pgrep -f bhvr) $(pgrep -f lnrgame) $(pgrep -f pandagames); do
			[[ ! "$scrn_on" != "0" ]] && [[ ! "$(grep -Eo "$gpid" "$toptsdir")" ]] || [[ ! "$(grep -Eo "$gpid" "$toptcdir")" ]] && [[ ! "$(cat /proc/"$gpid"/oom_score_adj)" == "0" ]] || [[ ! "$current_prof" != "gaming" ]] && continue || {
				kmsg "User is playing, applied gaming profile"
				sync
				setprop kingauto.prof "gaming"
				change_task_nice "erprint" "0"
				current_prof=gaming
				get_all
				apply_all_auto
				sleep 25
				}
				for spid in $(pgrep -f whatsapp) $(pgrep -f zhiliaoapp) $(pgrep -f com.adobe) $(pgrep -f telegram) $(pgrep -f nekox) $(pgrep -f challegram) $(pgrep -f com.netflix) $(pgrep -f com.wemesh) $(pgrep -f com.discord) $(pgrep -f android.youtube) $(pgrep -f facebook.katana) $(pgrep -f android.chrome) $(pgrep -f brave.browser) $(pgrep -f UCMobile) $(pgrep -f mozilla) $(pgrep -f duckduckgo) $(pgrep -f com.opera) $(pgrep -f microsoft) $(pgrep -f torproject) $(pgrep -f instagram.android) $(pgrep -f twitch); do
					[[ ! "$scrn_on" != "0" ]] && [[ ! "$(grep -Eo "$spid" "$toptsdir")" ]] || [[ ! "$(grep -Eo "$spid" "$toptcdir")" ]] && [[ ! "$(cat /proc/"$spid"/oom_score_adj)" == "0" ]] || [[ ! "$current_prof" != "balanced" ]] && continue || {
						kmsg "User is using social media, and etc apps. Applied balanced profile"
						sync
						setprop kingauto.prof "balanced"
						change_task_nice "erprint" "0"
						current_prof=balanced
						get_all
						apply_all_auto
						sleep 25
						}
						for bpid in $(pgrep -f primatelabs) $(pgrep -f gensuite) $(pgrep -f android.benchmark) $(pgrep -f test.uibench) $(pgrep -f Saplin.CPDT) $(pgrep -f glbenchmark) $(pgrep -f passmark) $(pgrep -f app.speedramp) $(pgrep -f app.beatsync) $(pgrep -f kinemaster) $(pgrep -f dmandroid) $(pgrep -f cputhrottlingtest) $(pgrep -f android.camera) $(pgrep -f GoogleCamera) $(pgrep -f snapcam); do
							[[ ! "$scrn_on" != "0" ]] && [[ ! "$(grep -Eo "$gpid" "$toptsdir")" ]] || [[ ! "$(grep -Eo "$gpid" "$toptcdir")" ]] && [[ ! "$(cat /proc/"$gpid"/oom_score_adj)" == "0" ]] || [[ ! "$current_prof" != "gaming" ]] && continue || {
								kmsg "User is running benchmark / heavy apps. Applied extreme profile"
								sync
								setprop kingauto.prof "extreme"
								change_task_nice "erprint" "0"
								current_prof=extreme
								get_all
								apply_all_auto
								sleep 25
								}
						done
				done
		done

		[[ ! "$scrn_on" == "0" ]] || [[ ! "$current_prof" != "sleeping" ]] && continue || {
			kmsg "Device screen is turned off. Applied battery profile, extended script check time"
			sync
			setprop kingauto.prof "battery"
			change_task_nice "erprint" "-20"
			current_prof=sleeping
			get_all
			apply_all_auto
			sleep 60
}

		[[ ! "$batt_sts" == "Charging" ]] || [[ ! "$current_prof" != "charging" ]] && continue || {
			kmsg "Device is charging, trying to reduce battery cycles by applying battery profile and extending check time"
			sync
			setprop kingauto.prof "battery"
			change_task_nice "erprint" "0"
			current_prof=charging
			get_all
			apply_all_auto
			sleep 60
		}

		[[ ! "$batt_pctg" -lt "20" ]] || [[ ! "$current_prof" != "lowbatt" ]] && continue || {
			kmsg "Device battery is lower than 20%, applying battery profile to prolong battery life"
			sync
			setprop kingauto.prof "battery"
			change_task_nice "erprint" "0"
			current_prof=lowbatt
			get_all
			apply_all_auto
		}

		[[ ! "$batt_pctg" -ge "20" ]] || [[ ! "$current_prof" != "nobehaviour" ]] && continue || {
			kmsg "No considerable usage found. Applied latency profile"
			sync
			setprop kingauto.prof "latency"
			change_task_nice "erprint" "0"
			current_prof=nobehaviour
			get_all
			apply_all_auto
			sleep 25
		}

		[[ "$avail_ram" -le "$full_ram" ]] && {
		kmsg "Device ram is almost fully in use, dropping caches to free some RAM"
		sync
		write "${vm}drop_caches" "3"
		get_all
		}
	done
) &