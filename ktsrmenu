#!/system/bin/sh
# KTSR by Pedro (pedrozzz0 @ GitHub)
# Credits: veez21
# If you wanna use it as part of your project, please maintain the credits to it respective's author(s).

# Magisk Module ID **
ID="KTSR"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "[!] $ID needs to run as root"; echo "type 'su' then '$_name'"; exit 1; }

# Import magisk util_functions.sh
[[ -f /data/adb/magisk/util_functions.sh ]] && . /data/adb/magisk/util_functions.sh || { echo "[!] util_functions.sh not detected"; exit 1; }

# Magisk Mod Directory
[[ -d "/sbin/.magisk" ]] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
[[ ! -d $MODDIR ]] && { echo "[!] Module not detected"; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/data/local/tmp/$ID.log
oldLOG=/data/local/tmp/$ID-old.log
# > Verbose output goes here
VERLOG=/data/local/tmp/$ID-verbose.log
oldVERLOG=/data/local/tmp/$ID-verbose-old.log
stdoutLOG=$MODDIR/logs/$ID-STDOUT.log
oldstdoutLOG=$MODDIR/logs/$ID-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null; mv -f $stdoutLOG $oldstdoutLOG 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

kts_mode=$(getprop persist.kingtweaks.mode)
 	
if [[ "$kts_mode" == "1" ]]
then
kts_profile=Automatic

elif [[ "$kts_mode" == "2" ]]
then
kts_profile=Battery
        	
elif [[ "$kts_mode" == "3" ]]
then
kts_profile=Balanced
        	
elif [[ "$kts_mode" == "4" ]]
then
kts_profile=Extreme

elif [[ "$kts_mode" == "5" ]]
then
kts_profile=Gaming

elif [[ "$kts_mode" == "6" ]]
then
kts_profile=Latency

else
kts_profile=Unknown
fi

if [[ "$(settings get global low_power)" == "1" ]]; then
low_power_mode=Enabled

else
low_power_mode=Disabled
fi

if [[ "$(cmd netpolicy get restrict-background | awk '{print $4}')" == "enabled" ]]; then
data_saver=Enabled

else
data_saver=Disabled
fi

if [[ "$(settings get secure location_providers_allowed)" == "" ]]; then
loc_mode_pwr_saving=Enabled

else
loc_mode_pwr_saving=Disabled
fi

if [[ "$(getprop init.svc.thermal-engine)" == "running" ]] || [[ "$(getprop init.svc.mi_thermald)" == "running" ]] || [[ "$(getprop init.svc.thermald)" == "running" ]] || [[ "$(getprop init.svc.thermalservice)" == "running" ]]; then
ts=On

elif [[ "$(getprop init.svc.thermal-engine)" == "stopped" ]] || [[ "$(getprop init.svc.mi_thermald)" == "stopped" ]] || [[ "$(getprop init.svc.thermald)" == "stopped" ]] || [[ "$(getprop init.svc.thermalservice)" == "stopped" ]]; then
ts=Off

else
ts=Unknown
fi

menu() {
clear
echo ""
echo "******************************************"
echo "* KTSR (Alt.) Profile Controller & Misc. *"
echo "******************************************"
echo ""
echo "[*] Current Profile: ${G}$kts_profile${N}"
echo ""
sleep 1.5
echo "[*] Thermal: ${B}$thermal${N}"
echo ""
sleep 1.3
test_connection
echo ""
echo "[*] Available profiles: "
echo ""
sleep 1.2
echo "[1] Automatic: Change your profile automatically based on specific circumstances and do additional tweaking for a better user-experience."
echo ""
sleep 2
echo "${B}[2] Battery: Reduce power draw to less battery drain and energetic comsumption, ensuring a juicy battery life.${N}"
echo ""
sleep 1.5
echo "${G}[3] Balanced: Balanced between battery life and performance, perfect to be used as daily driver.${N}"
echo ""
sleep 2
echo "${Y}[4] Extreme: Tweaks both CPU / GPU and more for less throttling, maintaining a consistent performance. May drain more battery also. Recommended to benchmarking / heavy apps.${N}"
echo ""
sleep 2.5
echo "${R}[5] Gaming: Recommended to gamers who want the best performance possible while playing, with almost zero throttling, tweaks both CPU / GPU and many other settings, will probably drain a lot of battery life.${N}"
echo ""
sleep 3.5
echo "[6] Latency: Recommended to users who want really silky / smooth UI"
echo ""
sleep 2.0
echo "[*] Other misc options: "
echo ""
sleep 1.8
echo "[7] Optimize apps package"
echo ""
sleep 1.6
if [[ "$low_power_mode" == "Disabled" ]]; then
echo "[8] Enable low power mode"
echo ""
sleep 1.6
else
echo "[9] Disable low power mode"
echo ""
sleep 1.4
fi
if [[ "$data_saver" == "Disabled" ]]; then
echo "[10] Enable data saver"
echo ""
sleep 1.4
else
echo "[11] Disable data saver"
echo ""
sleep 1.6
fi
if [[ "$loc_mode_pwr_saving" == "Disabled" ]]; then
echo "[12] Enable power-saving location mode"
echo ""
sleep 1.7
else
echo "[13] Disable power-saving location mode"
echo ""
sleep 1.9
fi
echo "[14] Clean trash files, E.G: System logs, debug logs, etc."
echo ""
sleep 2.3
echo "[15] Access our telegram group"
echo ""
sleep 1.6
echo "[16] FKM updater script"
echo ""
sleep 1.4
echo "[17] Kill background apps"
echo ""
sleep 1.3
if [[ "$ts" == "On" ]]; then
echo "${B}[18] Disable thermal${N}"
echo ""
sleep 1
elif [[ "$ts" == "Off" ]]; then
echo "${B}[19] Enable thermal${N}"
echo "" 
sleep 1
fi
echo "${R}[0] Exit${N}"
echo ""
sleep 0.9
echo -n "${Y}[*] Select the desired option:${N} "
read -r option
		case $option in
			"1")
				echo "${B}Applying profile...${N}"
				setprop persist.kingtweaks.mode "1" 2>/dev/null
                echo "${G}Done!${N}"
				;;
				
						"2")
						echo "${B}Applying profile...${N}"
						setprop persist.kingtweaks.mode "2" 2>/dev/null
						echo "${G}Done!"
                        ;;
						
						"3")
						echo "${B}Applying profile...${N}"
						setprop persist.kingtweaks.mode "3" 2>/dev/null
                        echo "${G}Done!${N}"
						;;
						
						"4")
						echo "${B}Applying profile...${N}"
						setprop persist.kingtweaks.mode "4" 2>/dev/null
						echo "${G}Done!${N}"
                        ;;
						
						"5")
						echo "${B}Applying profile...${N}"
						setprop persist.kingtweaks.mode "5" 2>/dev/null
						echo "${G}Done!${N}"
                        ;;
						
						"6")
						echo "${B}Applying profile...${N}"
						setprop persist.kingtweaks.mode "6" 2>/dev/null
						echo "${G}Done!${N}"
                        ;;
						
						"7")
						echo "${B}Optimizing packages...${N}"
						cmd package bg-dexopt-job
						;;
						
                        "8")
                        settings put global low_power 1
                        echo "${G}Done!${N}"
                        ;;
                        
                        "9")
                        settings put global low_power 0
                        echo "${G}Done!${N}"
                        ;;
                        
                        "10")
                        cmd netpolicy set restrict-background true
                        echo "${G}Done!${N}"
                        ;;
                        
                        "11")
                        cmd netpolicy set restrict-background false
                        echo "${G}Done!${N}"
                        ;;
                        
                        "12")
                        echo "${B}Applying settings...${N}"
                        settings put secure location_mode "0"
                        settings put secure location_providers_allowed ""
                        echo "0" > "/sys/module/service_locator/parameters/enable"
                        echo "${G}Done!${N}"
                        ;;
                        
                        "13")
                        settings put secure location_providers_allowed "gps,network"
                        echo "1" > "/sys/module/service_locator/parameters/enable"
                        echo "${G}Done!${N}"
                        ;;
                        
                        "14")
                        echo "${B}Cleaning debug logs and system trash...${N}"
                        cleantrash
                        echo "${G}Done!${N}"
                        ;;
                        
						"15")
						am start -a android.intent.action.VIEW -d https://t.me/kingprojectzdiscussion
						;;
						
						"16")
						echo "Copy this link to FKM -> Flasher -> Import a kernel download configuration to always getting alerted when a new KTSR update is released!"
						echo "https://raw.githubusercontent.com/pedrozzz0/King-Tweaks/master/update.json"
						;;
						
						"17")
						echo "${B}Killing all background apps...${N}"
						am kill-all
						sleep 2
						echo "${G}Done!${N}"
						;;
                        
						"18")
						echo "${B}Disabling thermal...${N}"
						stop thermald 2>/dev/null
						stop thermalservice 2>/dev/null
						stop mi_thermald 2>/dev/null
						stop thermal-engine 2>/dev/null
						echo "${G}Done!${N}"
						;;

						"19")
						echo "${B}Enabling thermal...${N}"
						start thermald 2>/dev/null
						start thermalservice 2>/dev/null
						start mi_thermald 2>/dev/null
						start thermal-engine 2>/dev/null
						echo "${G}Done!${N}"
						;;
						
						"0")
						echo "${G}Hope that see ya soon! ;)${N}"
						;;
						
						*)
						abort "${R}[!] Unexpected response, aborting...${N}"
						;;
						esac
						}
						
						if [[ -z "$1" ]]; then
						menu
						fi

						help_me(){
                        echo "$MODTITLE $VER($REL)"
                        echo "by $AUTHOR"
                        echo "Usage: $_name"
                        echo "or: $_name [options]..."
                        echo "Supported options:"
                        echo "-p [profile] [value from 1 to 6] [change between profiles without the terminal GUI]"
                        echo "-t [thermal] [enable / disable thermal services according to your actual state without the terminal GUI]"
                        echo "-h [help] [show this message]"
                        exit
                        }
						
						while getopts ":p:th:" opt; do
						[[ $# -gt 2 ]] && help_me
						case "${opt}" in
						
						p) echo "${B}Applying profile...${N}"
						setprop persist.kingtweaks.mode "$2" 2>/dev/null
						echo "${G}Done!${N}"
                        ;;
						
						t) if [[ $thermal == "On" ]]; then 
						echo "Disabling thermal..."
						stop thermald 2>/dev/null
						stop thermalservice 2>/dev/null
						stop mi_thermald 2>/dev/null
						stop thermal-engine 2>/dev/null
						echo "${G}Done!${N}"
						elif [[ $thermal == "Off" ]]; then
						echo "${B}Enabling thermal...${N}"
						start thermald 2>/dev/null
						start thermalservice 2>/dev/null
						start mi_thermald 2>/dev/null
						start thermal-engine 2>/dev/null
						echo "${G}Done!${N}"
						else
                        abort "${R}[!] No valid thermal controllers found / Unknown thermal state, aborting...${N}"
						fi
						;;
						
						h | *) help_me
						;;
						esac
                        done

                        shift $((OPTIND - 1))
                        
                        exit 0